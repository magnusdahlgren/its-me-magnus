CREATE TABLE public.notes (
  id text NOT NULL,
  title text,
  content text,
  image_url text,
  sort_index integer GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  is_important boolean NOT NULL DEFAULT false,
  use_as_tag boolean NOT NULL DEFAULT false,
  is_private boolean NOT NULL DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp without time zone,
  order_tagged_by text NOT NULL DEFAULT 'oldest'::text CHECK (order_tagged_by = ANY (ARRAY['index'::text, 'newest'::text, 'oldest'::text])),
  CONSTRAINT notes_pkey PRIMARY KEY (id)
);
CREATE TABLE public.notes_tags (
  tag_id text NOT NULL,
  note_id text NOT NULL,
  sort_index integer DEFAULT 0,
  CONSTRAINT notes_tags_pkey PRIMARY KEY (tag_id, note_id),
  CONSTRAINT notes_tags_tag_id_fkey FOREIGN KEY (tag_id) REFERENCES public.notes(id),
  CONSTRAINT notes_tags_note_id_fkey FOREIGN KEY (note_id) REFERENCES public.notes(id)
);

ALTER TABLE public.notes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.notes_tags ENABLE ROW LEVEL SECURITY;

-- Drop views if they exist
drop view if exists random_note;
drop view if exists tag_summaries;
drop view if exists untagged_notes;


-- Create random_note view
create view random_note as
select
  id,
  title,
  content,
  image_url,
  is_important,
  created_at,
  updated_at
from notes
order by random()
limit 1;

-- Create tag_summaries view
create view tag_summaries as
select
  notes_tags.tag_id,
  notes.title,
  notes.is_important,
  count(notes_tags.note_id) as notes_count
from notes_tags
join notes on notes_tags.tag_id = notes.id
group by notes_tags.tag_id, notes.title, notes.is_important;

-- Create untagged_notes view
create view untagged_notes as
select
  id,
  title,
  content,
  image_url,
  is_important,
  created_at,
  updated_at
from notes
where id <> '_untagged'
and id not in (
  select note_id from notes_tags
  union
  select tag_id from notes_tags
);

drop view if exists notes_with_tags;
create view notes_with_tags as
select
  n.id as note_id,
  n.title as note_title,
  n.content as note_content,
  n.image_url,
  n.is_important,
  n.is_private,
  n.use_as_tag,
  n.order_tagged_by,
  n.sort_index,
  n.created_at,
  n.updated_at,
  t.id as tag_id,
  t.title as tag_title,
  t.is_important as tag_is_important,
  exists (
    select 1
    from notes_tags nt
    where nt.tag_id = n.id
    limit 1
  ) as has_children
from notes n
left join notes_tags nt on nt.note_id = n.id
left join notes t on t.id = nt.tag_id;

drop view if exists notes_with_child_counts;
create view notes_with_child_counts as
 WITH child_counts AS (
         SELECT notes_tags.tag_id AS note_id,
            count(*) AS number_of_children
           FROM notes_tags
          GROUP BY notes_tags.tag_id
        )
 SELECT notes.id,
    notes.title,
    notes.content,
    notes.image_url,
    notes.is_important,
    notes.created_at,
    notes.updated_at,
    COALESCE(child_counts.number_of_children, 0::bigint) AS number_of_children
   FROM notes
     LEFT JOIN child_counts ON notes.id = child_counts.note_id;

-- Create index for faster access
CREATE INDEX idx_notes_tags_note_id ON notes_tags (note_id);
CREATE INDEX idx_notes_created_at ON notes (created_at);
CREATE INDEX idx_notes_tags_tag_id ON notes_tags (tag_id);

-- Add row level security policies
CREATE POLICY "Allow read of notes" ON "notes" FOR SELECT TO public USING (true);
CREATE POLICY "notes-admin-access" ON "notes" FOR ALL TO authenticated USING (true);
CREATE POLICY "Public select notes_tags" ON "notes_tags" FOR SELECT TO public USING (true);
CREATE POLICY "notes-dags-admin-access" ON "notes_tags" FOR ALL TO authenticated USING (true) WITH CHECK (true);

-- Insert initial data
INSERT INTO public.notes (id, title, content, image_url, is_important, use_as_tag, is_private, created_at, updated_at, order_tagged_by)
VALUES
  ('_untagged', 'Untagged Notes', 'Notes that are not tagged with any tags will appear here.', null, false, false, false, now(), null, 'oldest');
INSERT INTO public.notes (id, title, content, image_url, is_important, use_as_tag, is_private, created_at, updated_at, order_tagged_by)
VALUES
  ('start', 'Welcome to Mxgns', 'This is the start page of your notes app. Here you can find all your notes, browse by tags, and manage your notes.', null, false, false, false, now(), null, 'oldest');